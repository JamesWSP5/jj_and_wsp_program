# -*- coding:utf-8 -*-
# @Time : 2020/3/12 18:23
# @Author: wsp

# 继承和多态
# 继承从某个已有的类继承的类，该类称为子类，被继承的类称为父类，基类或者超类
# 继承者的好处，继承父类所有财产。当然自己可以基于父类的财富进行创造加工，即称为多态
class Student(object):
    def __init__(self, number):
        self.number = number

    def work(self):
        print ('学生的任务是学习')


class xiaoming(Student):
    pass


if __name__ == '__main__':
    xiaoming = xiaoming('12')
    xiaoming.work()
    print(xiaoming.number)
'''
静态语言和动态语言
    静态语言：
    静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前必须声明数据类型。 
例如：C++、Java、Delphi、C#等。
    动态语言：
    动态语言是在运行时确定数据类型的语言。变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。 
例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。
    静态语言的优势
    由于类型的强制声明，使得IDE有很强的代码感知能力，故，在实现复杂的业务逻辑、开发大型商业系统、以及那些生命周期很长的应用中，依托IDE对系统的开发很有保障；
由于静态语言相对比较封闭，使得第三方开发包对代码的侵害性可以降到最低；
动态语言的优势
    思维不受束缚，可以任意发挥，把更多的精力放在产品本身上；集中思考业务逻辑实现，思考过程即实现过程；
    
    对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。
    对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：
    因为静态语言会在编码阶段就检验你的数据类型，但是动态语言则是在编译的时候推断你的数据类型。   
'''
